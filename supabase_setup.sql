-- Supabase SQL migration for Tealium integration
-- Execute this in your Supabase SQL editor

-- Create table for caching Tealium visitor data
CREATE TABLE IF NOT EXISTS tealium_visitors (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  visitor_id TEXT,
  visitor_data JSONB NOT NULL,
  attribute_id TEXT,
  attribute_value TEXT,
  last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- Create indexes for faster lookups
  CONSTRAINT unique_visitor_id UNIQUE (visitor_id),
  CONSTRAINT unique_attribute UNIQUE (attribute_id, attribute_value)
);

-- Add RLS (Row Level Security) policies for Tealium visitors table
ALTER TABLE tealium_visitors ENABLE ROW LEVEL SECURITY;

-- Allow authenticated users to read tealium_visitors
CREATE POLICY "Allow authenticated users to read visitor data" 
  ON tealium_visitors FOR SELECT 
  USING (auth.role() = 'authenticated');

-- Allow authenticated users to insert and update tealium_visitors
CREATE POLICY "Allow authenticated users to insert and update visitor data" 
  ON tealium_visitors FOR INSERT 
  WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated users to update visitor data" 
  ON tealium_visitors FOR UPDATE 
  USING (auth.role() = 'authenticated');

-- Create a function to automatically update the last_updated timestamp
CREATE OR REPLACE FUNCTION update_last_updated_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.last_updated = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to call the function
CREATE TRIGGER update_tealium_visitors_last_updated
  BEFORE UPDATE ON tealium_visitors
  FOR EACH ROW
  EXECUTE FUNCTION update_last_updated_column();

-- Create table for API keys (optional)
CREATE TABLE IF NOT EXISTS tealium_api_keys (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  api_key TEXT NOT NULL,
  api_name TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  expires_at TIMESTAMP WITH TIME ZONE,
  last_used TIMESTAMP WITH TIME ZONE,
  is_active BOOLEAN DEFAULT TRUE
);

-- Add RLS policies for API keys
ALTER TABLE tealium_api_keys ENABLE ROW LEVEL SECURITY;

-- Only allow authenticated users to access API keys
CREATE POLICY "Allow authenticated users to read API keys" 
  ON tealium_api_keys FOR SELECT 
  USING (auth.role() = 'authenticated');

-- Create table for Tealium configuration
CREATE TABLE IF NOT EXISTS tealium_config (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  account TEXT NOT NULL,
  profile TEXT NOT NULL,
  engine_id TEXT NOT NULL,
  api_key_id BIGINT REFERENCES tealium_api_keys(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  is_active BOOLEAN DEFAULT TRUE
);

-- Add RLS policies for config
ALTER TABLE tealium_config ENABLE ROW LEVEL SECURITY;

-- Only allow authenticated users to access configs
CREATE POLICY "Allow authenticated users to read configs" 
  ON tealium_config FOR SELECT 
  USING (auth.role() = 'authenticated');

-- Create index for faster lookups
CREATE INDEX idx_tealium_visitors_attribute ON tealium_visitors (attribute_id, attribute_value);
CREATE INDEX idx_tealium_visitors_visitor_id ON tealium_visitors (visitor_id);
